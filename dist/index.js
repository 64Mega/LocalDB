function e(e,t,s,a){Object.defineProperty(e,t,{get:s,set:a,enumerable:!0,configurable:!0})}e(module.exports,"DBTable",(()=>t)),e(module.exports,"DBRow",(()=>$91642615dcd66358c3593e7159d6a980$exports.DBRow)),e(module.exports,"LocalDB",(()=>s));var t=class{async GetByID(e){return await this._db.GetById(e)}async GetAll(){return await this._db.Get()}async Insert(e){const t=await this._db.Insert(e);return Promise.resolve(t)}async DeleteRow(e){return await this._db.DeleteRow(e)}async DeleteById(e){return await this._db.DeleteById(e)}async Update(e){return e.id?await this._db.Update(e):await this.Insert(e)}async SortData(){await this._db.Sort(((e,t)=>e.id<t.id?-1:e.id>t.id?1:0))}async ReplaceData(e,t=!1){return t?(await this._db.DeleteEntireDB(),e.forEach((async e=>{await this.Insert(e)})),await this.SortData(),Promise.resolve(!0)):Promise.resolve(!1)}async MergeData(e,t=!1){return t?(e.forEach((async e=>{e.id&&delete e.id,await this.Insert(e)})),await this.SortData(),Promise.resolve(!0)):Promise.resolve(!1)}async DeleteAll(e=!1){return e?(this._db.DeleteEntireDB(),Promise.resolve(!0)):Promise.resolve(!1)}constructor(){this._db=null}};var s=class{get TableName(){return this._tableName}constructor(e){this._tableName="default",this._storage={rows:[],_idgen:1},this._tableName=e,this.ReadDB(!0)}async Get(){await this.ReadDB();const e=this._storage.rows.filter((e=>!e.isDeleted));return Promise.resolve(e)}async GetById(e){await this.ReadDB();const t=this._storage.rows.find((t=>t.id===e));return Promise.resolve(t)}async Insert(e){await this.ReadDB();const t={id:await this.GenerateID(),...e};return this._storage.rows.push(t),await this.WriteDB(),Promise.resolve(t)}async Update(e){await this.ReadDB();const t=this._storage.rows.findIndex((t=>t.id===e.id));if(t>=0){let s=this._storage.rows[t];return this._storage.rows[t]={...s,...e},await this.WriteDB(),Promise.resolve(this._storage.rows[t])}throw new Error(`Matching id '${e.id}' not found in ${this.TableName} (LocalDB->Update).`)}async Undelete(e){await this.ReadDB();const t=this._storage.rows.findIndex((t=>t.id===e));if(t>=0)return this._storage.rows[t].isDeleted=void 0,await this.WriteDB(),Promise.resolve(this._storage.rows[t]);throw new Error(`Matching id '${e}' not found in ${this.TableName} (LocalDB->Undelete).`)}async DeleteById(e,t=!0){await this.ReadDB();const s=this._storage.rows.findIndex((t=>t.id===e));return s>=0?(t?this._storage.rows.splice(s,1):this._storage.rows[s].isDeleted=!0,await this.WriteDB(),Promise.resolve(!0)):Promise.resolve(!1)}async DeleteRow(e,t=!0){return await this.DeleteById(e.id,t)}async Sort(e){return await this.ReadDB(),this._storage.rows.sort(e),await this.WriteDB(),Promise.resolve(this)}async DeleteEntireDB(){this._storage._idgen=1,this._storage.rows=[],await this.WriteDB()}async ReadDB(e=!1){return new Promise((async(t,s)=>{const a=localStorage.getItem(this.TableName);null!==a?(this._storage=JSON.parse(a),t(!0)):e?t(await this.WriteDB()):s(`Table ${this.TableName} does not exist!`)}))}async WriteDB(){return new Promise((e=>{const t=JSON.stringify(this._storage);localStorage.setItem(this.TableName,t),e(!0)}))}async GenerateID(){await this.ReadDB();const e=this._storage._idgen++;return await this.WriteDB(),Promise.resolve(e)}};
//# sourceMappingURL=index.js.map
